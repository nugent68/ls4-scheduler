#!/bin/tcsh
#
# get_ut_date [local]
# return date appropriate for data directory names and log files.
#
# return UT date as yyyymmdd, where UT date is the UT date of the previous night if 
# it is currently before 8AM local time, otherwise return UT date of the next night.
#
# if the command line argument is "local", return current local date if it is after 
# 8 AM local time, otherwise return yesterday's local date.
#
# if FAKE_OBS = 1, use current local date for local date and tomorrow's date
# for UT date
#
#
if ( $#argv == 0 ) then
   set local = 0
else
   if ( $#argv == 1  && $argv[1] == "local" ) then
      set local = 1
   else
      echo "syntax: get_ut_date [local]"
      exit
   endif
endif
#
set current_local_hour = `date +"%H"`
#
#  check if current year is a leap year
set dy = `date +"%Y"`
@ n = $dy / 4
@ n = $n * 4
if ( $n == $dy ) then
   set leap_year = 1 
else
   set leap_year = 0
endif
#
#echo "local hour = $current_local_hour"
#echo "leap_year = $leap_year"
#echo "local = $local"
#
# for FAKER_OBS keep local date to current local date and set
# ut date to tomorrow's date. Do the same if local = 0 and
# it is after 8 AM local time.
#
if ( $FAKE_OBS || ( $local == 0 && $current_local_hour >= 8 ) ) then
#  add one to the ut date if the UT and local date are the same
   set d_local = `date  +"%Y%m%d"`
   set d_ut = `date -u  +"%Y%m%d"`
   if ( $d_ut == $d_local ) then
     set dy = `date +"%Y"`
     set dm = `date +"%m"`
     set dd = `date +"%d"`
     set dy = `printf "%d" $dy`
     set dm = `printf "%d" $dm`
     set dd = `printf "%d" $dd`
     @ dd = $dd + 1
#    advance month and year by 1 as neccessary
     if ( $dd > 28 && $dm == 2  && $leap_year == 0 ) then
       set dm = 3
       set dd = 1
     else if ( $dd == 30 && $dm == 2 ) then
       set dm = 3
       set dd = 1
     else if ( $dd == 31  ) then
       if ( $dm == 4 || $dm == 6 || $dm == 9 || $dd == 11 )  then
         @ dm = $dm + 1
         set dd = 1
       endif
     else if ( $dd == 32 && $dm != 12 ) then
       @ dm = $dm + 1
       set dd = 1
     else if ( $dd == 32 && $dm == 12 ) then
       @ dy = $dy + 1
       set dm = 1
       set dd = 1
     endif
#     set d_ut = $dy$dm$dd
     set d_ut = `printf "%04d%02d%02d" $dy $dm $dd`
   endif
   if ( $FAKE_OBS ) then
      set d_ut = $d_ut.fake
   endif
   if ( $local == 0 ) then
      echo $d_ut
   else
      echo $d_local
   endif
   exit
endif
#
# if local = 0 and it is before 8 AM local time, use 
# today's date for d_ut
if ( $local == 0  && $current_local_hour < 8 ) then
     set d_ut = `date  +"%Y%m%d"`
     echo $d_ut
endif
#
# if local = 1 and it is after 8 AM local time, use today's date
# for d_local 
if ( $local == 1  && $current_local_hour >= 8 ) then
     set d_local  = `date  +"%Y%m%d"`
     echo $d_local
endif
#
# if local = 1 and it is before 8 AM local time, use yesterday's date
# for d_local 
if ( $local == 1  && $current_local_hour < 8 ) then
     set dy = `date +"%Y"`
     set dm = `date +"%m"`
     set dd = `date +"%d"`
#    decrement month and year by 1 if neccessary
     if ( $dd == 1 && $dm == 3  && $leap_year == 0 ) then
       set dm = 2
       set dd = 28
     else if ( $dd == 1 && $dm == 3 ) then
       set dm = 2
       set dd = 29
     else if ( $dd == 1 && $dm == 1 ) then
       set dm = 12
       set dd = 31
       @ dy = $dy - 1
     else if ( $dd == 1  ) then
       if ( $dm == 2 || $dm == 4 || $dm == 6 || $dm == 8 || $dm == 9 || $dm == 11 )  then
         @ dm = $dm - 1
         set dd = 31
       else
         @ dm = $dm - 1
         set dd = 30
       endif
     else
         @ dd = $dd - 1
     endif
#     set d_local = $dy$dm$dd
     set d_local = `printf "%04d%02d%02d" $dy $dm $dd`
     echo $d_local
endif
exit
#

